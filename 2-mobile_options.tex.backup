\chapter{Understanding Mobile Application Development Options}
\justifying
\section{Introduction}

This chapter provides a detailed explanation on the distinct types of mobile applications that have been already introduced. As a result, the reader will be aware of the pros and cons that every scenario involves. Special attention will be payed to hybrid mobile applications, not only because the whole project is based on them, but also because they are the less well-known.

One section will be devoted for each and every scenario, discussing how are they developed and exposing their strengths and weaknesses. A brief summary of the technologies and tools needed for each will also be provided. The chapter will conclude with a table to sum up all the available scenarios.

\section{Native Mobile Applications}

A native mobile application is an application coded in a specific programming language. The most popular are Java for Android and Swift or Objective C for iOS operating systems. They provide the best usability, the best features, the best performance, the best overall user experience, plus are highly reliable. Because of this, apps like video games tend to be developed this way, as they are resource intensive and a bad performance could hurt the user experience. However, this type of app is tied to one single operating system, forcing the development team to make duplicate versions that work on other platforms. Therefore this may not be the best option for apps intended to spread throughout the whole market.

Their key features are:

\begin{itemize}
	\item \textbf{Multi touch handling:} native apps support all kinds of multi touch events, from double taps or pinches to pressure-sensitive taps.
	\item \textbf{Built-in components:} camera, GPS or encrypted storage are only a few of the features native to a device that can be smoothly integrated into an app. Built-in components are of such importance to some apps that may be a deciding factor on which mobile technology one should choose.
	\item \textbf{Fast graphics and fluid animations:} for those apps which are using a lot of data and require a fast refresh, are highly interactive or make use of intensely computational algorithms, native apps provide the highest efficiency and the best results.
	\item \textbf{High reliability:} the abstraction while coding is lower than on the other types of mobile applications. Therefore, as a developer, you got more control over what is going on inside your app, and nasty surprises are less likely to happen. 
	\item \textbf{Improved user experience and familiarity:} people are accustomed to the native platform. Making use of all the native features will be easier for the average user and the app will be just plain easier to use.
	\item \textbf{Documentation:} apart from the official docuementation, there are thousands of books for Android and iOS development, and many more blogs, articles and websites with detailed information about every feature and little crevice.
\end{itemize}

After taking a look at the pros of developing a native app, it is clear that they are unbeatable on some aspects. However, they suffer from a number of issues:

\begin{itemize}
	\item \textbf{System restricted:} the fact that native apps are developed using specific programming languages turns porting an app between platforms into a time-consuming task because most of the code will be simply useless. 
	\item \textbf{Difficult to develop:} the programming languages used are not the easiest ones, so simply cutting and pasting Objective-C or Java will neither suffice nor work.
	\item \textbf{High level of experience required:} because native apps are difficult to develop, the level of experience required is higher than other development scenarios. Indeed, the technological know-how of a developer is a very important consideration.
	\item \textbf{Require an integrated development environment:} an integrated development environment, or IDE, provides tools for building, debugging, managing, version control and some other critical tools that professional developers need. These tools are needed because of the difficulties involved in the development process. In fact, usually different IDEs are used for each programming language, and even though they tend to be very similar to one another, so they become another thing to add to the list of inconvenients.
\end{itemize}

After considering all the pros and cons concerning the development of a native mobile application, we can conlude that it is the best way to develop ambitious, compute-intensive, single platform mobile applications.

\section{Web Mobile Applications}

A web mobile application, also known as HTML5 mobile application, is basically a web page designed to work on the small screen of a smartphone. This makes them compatible with every modern mobile browser. Developing them is easier as well: the technological bar and the learning curve of website programming languages are singnificantly lower than those of Objective C, for example.

Web apps most remarkable aspects are the following:

\begin{itemize}
	\item \textbf{Write once, run anywhere:} web applications take this concept to the extreme. As long as the device is running a modern browser, the user can use the app. This makes sure that it will reach the whole market. 
	\item \textbf{Searchable:} because the content is on the web, it can be searched, which can be a huge boost to its popularity.
	\item \textbf{Easy to develop:} the complexity involved in developing a web page is usually diminished by the fact that is easier to understand and of a higher level than native apps programming languages.
	\item \textbf{Distribution and support:} native mobile applications are dependent upon marketplaces for their distribution and support. Nevertheless, web applications are hosted on a server kept under control by the development team, so fixing a bug or adding features becomes a much easier task.
\end{itemize}

However, these advantages come at a price:

\begin{itemize}
	\item \textbf{Lack of access to native features:} web applications are not capable of accessing built-in components such as the camera or the GPS. This lack may be a determining factor when security is of the utmost importance, as offline storage and security are not available fopr use in a proper manner.
	\item \textbf{Multi-touch input events not supported:} today, no one has managed to capture multi-touch input events in this type of app. This is a clear limitation for any application that requires two or more touch events simultaneously, like games of other highly interactive apps.
	\item \textbf{Unfamiliar feeling:} users will not be as familiar with a web application as they would be with a native application, and therefore the user experience will resent.
\end{itemize}

As we just explained, web mobile applications excel at almost every aspect where native mobile applications suffer. In general, they are suited for simple tasks like adapting websites with a lot of text to the tiny screen of a mobile device, but tend to be bad a bad design choice for more specific tasks like highly interactive or tight security apps. Also, statistics show that 90\% of the time on mobile devices is spent in apps, and not in the browser. 

\section{Hybrid Mobile Applications}

Hybrid mobile applications combine the best of both the native and web application worlds. A hybrid app is built using HTML5, CSS and JavaScript, like a web application. Then, the app is wrapped inside a thin container that provides access to native features. This way the code will work on every platform, reducing the porting task to rewriting only a few, small parts of the app.

Before digging deeper into the definition of hybrid mobile apps, it is important to clarify that there are two subtypes, which will be classified in terms of this work as Native Hybrid and Web Hybrid.

Native Hybrid apps include one or more webviews, generally controlled by the native side, who is responsible of provinding the transitions and navigation between webviews. 

On a Web Hybrid app, the whole content is wrapped in a webview. The thin native container acts as a bridge between the app and the device. The native side does not provide any kind of user interface component. It is, therefore, a mere intermediary for native-to-webview communication.

However, as in most cases where things look perfect, the devil is in the details. This subject will be further discussed while describing the two technologies previously mentioned: PhoneGap and React Native.

\section{Summary}

Based on current technology, the scenarios examined previously are summarized in the following table:

\begin{table}[H]
\def\tabularxcolumn#1{m{#1}}
\Centering
\captionsetup{justification=centering}
\hyphenpenalty=10000
\begin{tabularx}{15cm}{|X|X|X|X|}
\hline
                               & \textbf{Native}             & \textbf{Web}             & \textbf{Hybrid}        \\ \hline
\textbf{Programming Languages} & Java, Swift, Objective C    & HTML5, CSS, Javascript   & HTML5, CSS, Javascript \\ \hline
\textbf{Installed locally}     & Yes                         & No                       & Yes                    \\ \hline
\textbf{Features}              & \multicolumn{3}{l|}{}                                                           \\ \hline
Graphics                       & Native APIs                 & HTML, Canvas, WebGL, SVG & HTML, Canvas, SVG      \\ \hline
Performance                    & Fast                        & Slow                     & Depends                \\ \hline
Look and feel                  & Native                      & Emulated                 & Depends                \\ \hline
Distribution                   & App Market                  & Web                      & App Market             \\ \hline
Internet connection required   & Depends                     & Yes                      & Depends                \\ \hline
\textbf{Built-in Components}   & \multicolumn{3}{l|}{}                                                           \\ \hline
Camera                         & Yes                         & No                       & Yes                    \\ \hline
Geolocation                    & Yes                         & Yes                      & Yes                    \\ \hline
Storage                        & Secure offline file storage & Shared SQL               & Both                   \\ \hline
Notifications                  & Yes                         & No                       & Yes                    \\ \hline
Contacts, calendar...          & Yes                         & No                       & Yes                    \\ \hline
\textbf{Gesture Recognition}   & \multicolumn{3}{l|}{}                                                           \\ \hline
Tapping                        & Yes                         & Yes                      & Yes                    \\ \hline
Swipe                          & Yes                         & Yes                      & Yes                    \\ \hline
Pinch                          & Yes                         & No                       & Yes                    \\ \hline
Other multi-touch              & Yes                         & No                       & Yes                    \\ \hline
\end{tabularx}
\caption{Features of the different scenarios available for mobile application development.}
\end{table}

\vfill

\section{Dependencies}

Both PhoneGap and React Native make use of a series of separate technologies. These are briefly explained here in order to facilitate the understanding of this work.

\subsection{Node Package Manager}

As its name says, Node Package Manager or NPM is a package manager for JavaScript. It eases the task of installing, sharing and distributing code, manages dependencies in a project and helps giving and receiving feedback with others.

\subsection{Gradle}

Gradle is an open source general-purpose build automation system for the building, testing, publishing and deployment of software packages, websites, applications and others. It uses a domain-specific language based on Groovy. It takes the best features of other builing systems, such as Maven or Ant, and combines them into one.

\subsection{Watchman}

Watchman is a system designed to watch files and record when they change. It can also trigger actions when a change is made.

